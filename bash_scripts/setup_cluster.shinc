function setup_kubectl() {
  log_msg "Setting up kubectl"
  gcloud config set project ${PROJECT_NAME}
  gcloud config set compute/zone ${GCP_REGION}
  gcloud container clusters get-credentials ${CLUSTER_NAME}
  [[ "${?}" -eq 0 ]] && log_msg "kubectl configured with success" || log_msg "kubectl configured with erro!!!"
}

function setup_helm() {
  log_msg "Setting up helm"
  kubectl -n kube-system create serviceaccount tiller
  kubectl create clusterrolebinding tiller --clusterrole cluster-admin --serviceaccount=kube-system:tiller
  helm init --service-account tiller
  [[ "${?}" -eq 0 ]] && log_msg "helm configured with success" || log_msg "helm configured with erro!!!"
  declare -a TILLER_PODS="$(kubectl --all-namespaces=true get pods | awk '/tiller/{print $3}')"
  declare -i RETRIES=10
  while ((RETRIES--)); do
    if [[ "${TILLER_PODS//\/*/}" -gt 0 ]] ; then
      log_msg "Waiting for tiller pods to be ready ${TILLER_PODS}"
      sleep 15s
      declare -a TILLER_PODS="$(kubectl --all-namespaces=true get pods | awk '/tiller/{print $3}')"
    else
      log_msg "Tiller is running"
      break
    fi
  done
}

function deploy_apps() {
  log_msg "Deploying Let's Encrypt / Cert Manager"
  helm repo add jetstack https://charts.jetstack.io
  kubectl create namespace cert-manager
  kubectl label namespace cert-manager certmanager.k8s.io/disable-validation=true
  kubectl apply -f https://raw.githubusercontent.com/jetstack/cert-manager/release-0.8/deploy/manifests/00-crds.yaml
  kubectl create -f "${CONFIG_DIR}/letsencrypt-prod.yaml"
  helm install --name cert-manager --namespace cert-manager --version v0.8.1 jetstack/cert-manager \
    --set ingressShim.defaultIssuerName=letsencrypt-prod \
    --set ingressShim.defaultIssuerKind=ClusterIssuer

  log_msg "Deploying Sidecar"
  helm install --name ingress stable/nginx-ingress

  log_msg "Deploying Joomla"
  helm install --name joomla stable/joomla \
    --set joomlaPassword=secretpassword \
    --set mariadb.rootUser.password=secretpassword \
    --set service.type=ClusterIP \
    --set ingress.enabled=true \
    --set ingress.certManager=true \
    --set ingress.hosts[0].tls=true \
    --set ingress.hosts[0].certManager=true \
    --set ingress.hosts[0].tlsSecret=joomla.local-tls \
    --set ingress.hosts[0].name=joomla.lozanomatheus.com

  log_msg "Deploying Autoscaler"
  helm install --name cluster-autoscaler stable/cluster-autoscaler \
    --namespace kube-system \
    --set autoDiscovery.clusterName=mlozano \
    --set autoDiscovery.enabled=true \
    --set cloudProvider=gce \
    --set extraArgs.balance-similar-node-groups=false \
    --set extraArgs.expander=random \
    --set rbac.create=true \
    --set "autoscalingGroupsnamePrefix[0].name=default-node-pool,autoscalingGroupsnamePrefix[0].maxSize=10,autoscalingGroupsnamePrefix[0].minSize=1"
}

function setup_cluster() {
  log_msg "Creating users"
  kubectl apply -f "${CONFIG_DIR}/dashboard_users.yaml"

  log_msg "Deploying Kubernetes Dashboard"
  helm install --name kubernetes-dashboard stable/kubernetes-dashboard \
    --set resources.limits.cpu=200m \
    --set service.type=ClusterIP \
    --set service.externalPort=443 \
    --set ingress.enabled=true \
    --set ingress.annotations."kubernetes\.io/ingress\.class"="nginx" \
    --set-string ingress.annotations."kubernetes\.io/tls-acme"="true" \
    --set-string ingress.annotations."nginx\.ingress\.kubernetes\.io/secure-backends"="true" \
    --set ingress.annotations."nginx\.ingress\.kubernetes\.io/backend-protocol"="HTTPS" \
    --set ingress.hosts[0]=kubernetes-dashboard.lozanomatheus.com \
    --set ingress.tls[0].secretName=kubernetes-dashboard-tls \
    --set ingress.tls[0].hosts[0]=kubernetes-dashboard.lozanomatheus.com \
    --set rbac.create=true \
    --namespace=kube-system
}
